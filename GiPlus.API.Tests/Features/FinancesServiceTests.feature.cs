// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GiPlus.API.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class FinanceServiceTestsFeature : object, Xunit.IClassFixture<FinanceServiceTestsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "FinancesServiceTests.feature"
#line hidden
        
        public FinanceServiceTestsFeature(FinanceServiceTestsFeature.FixtureData fixtureData, GiPlus_API_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "FinanceServiceTests", "    As a Developer\r\n    I want to add new Finance through API\r\n    So that It can" +
                    " be available for applications.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
    #line hidden
#line 7
        testRunner.Given("The Endpoint https://inventex.azurewebsites.net/api/v1/finances is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName",
                        "Email",
                        "Password"});
            table1.AddRow(new string[] {
                        "Ricardo",
                        "De la Cruz",
                        "ric.cruz1212@gmail.com",
                        "Ss924@d#p_s"});
#line 8
        testRunner.And("A User is already stored in user\'s  data", ((string)(null)), table1, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add Finance with Unique Name")]
        [Xunit.TraitAttribute("FeatureTitle", "FinanceServiceTests")]
        [Xunit.TraitAttribute("Description", "Add Finance with Unique Name")]
        [Xunit.TraitAttribute("Category", "finance-adding")]
        public void AddFinanceWithUniqueName()
        {
            string[] tagsOfScenario = new string[] {
                    "finance-adding"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Finance with Unique Name", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Day",
                            "Quantity",
                            "Type",
                            "UserId"});
                table2.AddRow(new string[] {
                            "Sample",
                            "01/02/2020",
                            "20",
                            "true",
                            "1"});
#line 14
        testRunner.When("a Post Request is sent", ((string)(null)), table2, "When ");
#line hidden
#line 17
        testRunner.Then("A Response with Status 200 is received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Day",
                            "Quantity",
                            "Type",
                            "UserId"});
                table3.AddRow(new string[] {
                            "1",
                            "Sample",
                            "01/02/2020",
                            "20",
                            "true",
                            "1"});
#line 18
        testRunner.And("a Finance Resource is included in Response Body", ((string)(null)), table3, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add Finance with existing name")]
        [Xunit.TraitAttribute("FeatureTitle", "FinanceServiceTests")]
        [Xunit.TraitAttribute("Description", "Add Finance with existing name")]
        [Xunit.TraitAttribute("Category", "finance-adding")]
        public void AddFinanceWithExistingName()
        {
            string[] tagsOfScenario = new string[] {
                    "finance-adding"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Finance with existing name", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Day",
                            "Quantity",
                            "Type",
                            "UserId"});
                table4.AddRow(new string[] {
                            "1",
                            "Sample",
                            "01/02/2020",
                            "20",
                            "true",
                            "1"});
#line 24
        testRunner.Given("A Finance is already stored", ((string)(null)), table4, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Day",
                            "Quantity",
                            "Type",
                            "UserId"});
                table5.AddRow(new string[] {
                            "Sample",
                            "01/02/2020",
                            "20",
                            "true",
                            "1"});
#line 27
        testRunner.When("A Post Request is sent", ((string)(null)), table5, "When ");
#line hidden
#line 30
        testRunner.Then("A Response with Status 400 is received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 31
        testRunner.And("An Error Message with value \"Finance Name already exists.\" is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
        testRunner.And("the second number is 70", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                FinanceServiceTestsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                FinanceServiceTestsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
